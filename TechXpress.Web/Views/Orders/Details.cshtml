@using TechXpress.Data.Models
@using TechXpress.Web.Extensions
@model TechXpress.Data.Models.Order
@{
    ViewData["Title"] = $"Order #{Model.Id} Details";
}

<div class="container-fluid px-4 py-3">
    <!-- Order Header -->
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
        <div class="d-flex align-items-center mb-3 mb-md-0">
            <a href="@Url.Action("Index", "Orders")" class="btn btn-outline-secondary btn-icon me-3">
                <i class="fas fa-arrow-left"></i>
            </a>
            <div>
                <h2 class="mb-0">Order #@Model.Id</h2>
                <small class="text-muted">Placed on @Model.OrderDate.ToString("MMMM dd, yyyy")</small>
            </div>
        </div>
        <div class="d-flex flex-column flex-sm-row align-items-start align-items-sm-center gap-3">
            <span class="badge @Model.OrderStatus.GetStatusBadgeClass() fs-6 py-2 px-3">
                @Model.OrderStatus
            </span>
            @if (Model.OrderStatus == OrderStatus.Pending || Model.OrderStatus == OrderStatus.Processing)
            {
                <form asp-action="UpdateOrderStatus" method="post">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <input type="hidden" name="status" value="@OrderStatus.Cancelled" />
                    <button type="submit" class="btn btn-outline-danger"
                            onclick="return confirm('Are you sure you want to cancel this order?')">
                        <i class="fas fa-times-circle me-2"></i>Cancel Order
                    </button>
                </form>
            }
        </div>
    </div>

    <!-- Status Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-4">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-4">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row g-4">
        <!-- Order Items Section -->
        <div class="col-lg-8">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="mb-0">
                        <i class="fas fa-box-open text-primary me-2"></i>Order Items
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th class="ps-4">Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th class="pe-4 text-end">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.OrderDetails)
                                {
                                    <tr>
                                        <td class="ps-4">
                                            <div class="d-flex align-items-center">
                                                <div class="position-relative">
                                                    <img src="@item.Product.ImageUrl" alt="@item.Product.Name"
                                                         class="rounded-3 me-3" style="width: 60px; height: 60px; object-fit: contain;">
                                                    @if (item.Quantity > 1)
                                                    {
                                                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
                                                            @item.Quantity
                                                        </span>
                                                    }
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">@item.Product.Name</h6>
                                                    <small class="text-muted">SKU: @item.Product.SKU</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>@item.Price.ToString("C")</td>
                                        <td>@item.Quantity</td>
                                        <td class="pe-4 text-end fw-bold">@((item.Price * item.Quantity).ToString("C"))</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Order Timeline -->
            <!-- Order Timeline -->
            <div class="card shadow-sm border-0 mt-4">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="mb-0">
                        <i class="fas fa-history text-primary me-2"></i>Order Timeline
                    </h5>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        <!-- Order Placed - Always shown -->
                        <div class="timeline-item">
                            <div class="timeline-content p-3 rounded-3 bg-light">
                                <div class="d-flex justify-content-between mb-2">
                                    <span class="fw-bold">Order Placed</span>
                                    <small class="text-muted">@Model.OrderDate.ToString("MMMM dd, yyyy h:mm tt")</small>
                                </div>
                                <p class="mb-0">Your order has been received.</p>
                                @if (Model.Payments?.Any() == true)
                                {
                                    <p class="mb-0 mt-2">
                                        Payment Method: <strong>@Model.Payments.First().Method</strong>
                                        @if (Model.Payments.First().Status == PaymentStatus.Completed)
                                        {
                                            <span class="badge bg-success ms-2">Paid</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning ms-2">@Model.Payments.First().Status</span>
                                        }
                                    </p>
                                }
                            </div>
                        </div>

                        <!-- Processing - Show if status is Processing or beyond -->
                        @if (Model.OrderStatus >= OrderStatus.Processing)
                        {
                            <div class="timeline-item">
                                <div class="timeline-content p-3 rounded-3 bg-light">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="fw-bold">Processing</span>
                                        <small class="text-muted">
                                            @(Model.LastUpdated?.ToString("MMMM dd, yyyy h:mm tt") ?? Model.OrderDate.AddHours(1).ToString("MMMM dd, yyyy h:mm tt"))
                                        </small>
                                    </div>
                                    <p class="mb-0">We're preparing your order for shipment.</p>
                                    @if (Model.OrderDetails?.Any() == true)
                                    {
                                        <p class="mb-0 mt-2">
                                            <strong>@Model.OrderDetails.Sum(od => od.Quantity)</strong> items being prepared
                                        </p>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Shipped - Show if status is Shipped or beyond -->
                        @if (Model.OrderStatus >= OrderStatus.Shipped)
                        {
                            <div class="timeline-item">
                                <div class="timeline-content p-3 rounded-3 bg-light">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="fw-bold">Shipped</span>
                                        <small class="text-muted">
                                            @(Model.LastUpdated?.ToString("MMMM dd, yyyy h:mm tt") ?? Model.OrderDate.AddDays(1).ToString("MMMM dd, yyyy h:mm tt"))
                                        </small>
                                    </div>
                                    <p class="mb-0">Your order is on its way.</p>
                                    @if (Model.ShippingAddress != null)
                                    {
                                        <p class="mb-0 mt-2">
                                            Shipping to:
                                            <strong>
                                                @Model.ShippingAddress.AddressLine1,
                                                @Model.ShippingAddress.City,
                                                @Model.ShippingAddress.ZipCode
                                            </strong>
                                        </p>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Delivered - Show if status is Delivered -->
                        @if (Model.OrderStatus == OrderStatus.Delivered)
                        {
                            <div class="timeline-item">
                                <div class="timeline-content p-3 rounded-3 bg-light">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="fw-bold">Delivered</span>
                                        <small class="text-muted">
                                            @(Model.LastUpdated?.ToString("MMMM dd, yyyy h:mm tt") ?? DateTime.Now.ToString("MMMM dd, yyyy h:mm tt"))
                                        </small>
                                    </div>
                                    <p class="mb-0">Your order has been successfully delivered.</p>
                                </div>
                            </div>
                        }

                        <!-- On Hold -->
                        @if (Model.OrderStatus == OrderStatus.OnHold)
                        {
                            <div class="timeline-item">
                                <div class="timeline-content p-3 rounded-3 bg-light">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="fw-bold">On Hold</span>
                                        <small class="text-muted">
                                            @(Model.LastUpdated?.ToString("MMMM dd, yyyy h:mm tt") ?? DateTime.Now.ToString("MMMM dd, yyyy h:mm tt"))
                                        </small>
                                    </div>
                                    <p class="mb-0">Your order is currently on hold.</p>
                                    @if (Model.Payments?.Any(p => p.Status == PaymentStatus.Pending) == true)
                                    {
                                        <p class="mb-0 mt-2">
                                            <i class="fas fa-exclamation-circle text-warning me-1"></i>
                                            Payment verification required
                                        </p>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Cancelled -->
                        @if (Model.OrderStatus == OrderStatus.Cancelled)
                        {
                            <div class="timeline-item">
                                <div class="timeline-content p-3 rounded-3 bg-light">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="fw-bold">Cancelled</span>
                                        <small class="text-muted">
                                            @(Model.LastUpdated?.ToString("MMMM dd, yyyy h:mm tt") ?? DateTime.Now.ToString("MMMM dd, yyyy h:mm tt"))
                                        </small>
                                    </div>
                                    <p class="mb-0">This order has been cancelled.</p>
                                    @if (Model.Payments?.Any(p => p.Status == PaymentStatus.Refunded) == true)
                                    {
                                        <p class="mb-0 mt-2">
                                            <i class="fas fa-undo-alt text-success me-1"></i>
                                            Refund processed
                                        </p>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Returned -->
                        @if (Model.OrderStatus == OrderStatus.Returned)
                        {
                            <div class="timeline-item">
                                <div class="timeline-content p-3 rounded-3 bg-light">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="fw-bold">Returned</span>
                                        <small class="text-muted">
                                            @(Model.LastUpdated?.ToString("MMMM dd, yyyy h:mm tt") ?? DateTime.Now.ToString("MMMM dd, yyyy h:mm tt"))
                                        </small>
                                    </div>
                                    <p class="mb-0">This order has been returned.</p>
                                    @if (Model.Payments?.Any(p => p.Status == PaymentStatus.Refunded) == true)
                                    {
                                        <p class="mb-0 mt-2">
                                            <i class="fas fa-undo-alt text-success me-1"></i>
                                            Refund processed
                                        </p>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Refunded -->
                        @if (Model.OrderStatus == OrderStatus.Refunded)
                        {
                            <div class="timeline-item">
                                <div class="timeline-content p-3 rounded-3 bg-light">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="fw-bold">Refunded</span>
                                        <small class="text-muted">
                                            @(Model.LastUpdated?.ToString("MMMM dd, yyyy h:mm tt") ?? DateTime.Now.ToString("MMMM dd, yyyy h:mm tt"))
                                        </small>
                                    </div>
                                    <p class="mb-0">This order has been refunded.</p>
                                    @if (Model.Payments?.LastOrDefault() is Payment lastPayment)
                                    {
                                        <p class="mb-0 mt-2">
                                            Refund Amount: <strong>@lastPayment.Amount.ToString("C")</strong>
                                        </p>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Summary Section -->
        <div class="col-lg-4">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="mb-0">
                        <i class="fas fa-receipt text-primary me-2"></i>Order Summary
                    </h5>
                </div>
                <div class="card-body">
              
                    <div class="d-flex justify-content-between fw-bold fs-5">
                        <span>Total</span>
                        <span>@Model.TotalAmount.ToString("C")</span>
                    </div>

                    @* @if (Model.OrderStatus == OrderStatus.Pending) *@
                    @* { *@
                    @*     <form asp-action="ProcessPayment" method="post" class="mt-4"> *@
                    @*         <input type="hidden" name="id" value="@Model.Id" /> *@
                    @*         <div class="mb-3"> *@
                    @*             <label for="paymentTransactionId" class="form-label">Payment Transaction ID</label> *@
                    @*             <input type="text" name="paymentTransactionId" class="form-control" required /> *@
                    @*         </div> *@
                    @*         <button type="submit" class="btn btn-success w-100 py-2"> *@
                    @*             <i class="fas fa-check-circle me-2"></i>Complete Payment *@
                    @*         </button> *@
                    @*     </form> *@
                    @* } *@
                </div>
            </div>

            <!-- Shipping Information -->
            <div class="card shadow-sm border-0 mt-4">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="mb-0">
                        <i class="fas fa-truck text-primary me-2"></i>Shipping Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-start mb-3">
                        <div class="flex-shrink-0">
                            <i class="fas fa-user-circle text-muted fs-4"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="mb-1">@Model.ShippingAddress.FirstName @Model.ShippingAddress.LastName</h6>
                            <p class="mb-0 text-muted">@Model.ShippingAddress.PhoneNumber</p>
                        </div>
                    </div>
                    <div class="d-flex align-items-start">
                        <div class="flex-shrink-0">
                            <i class="fas fa-map-marker-alt text-muted fs-4"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <p class="mb-1">
                                @Model.ShippingAddress.AddressLine1<br>
                                @if (!string.IsNullOrEmpty(Model.ShippingAddress.AddressLine2))
                                {
                                    @Model.ShippingAddress.AddressLine2

                                    <br>
                                }
                                @Model.ShippingAddress.City, @Model.ShippingAddress.State @Model.ShippingAddress.ZipCode<br>
                                @Model.ShippingAddress.Country
                            </p>
                            <small class="text-muted">Standard Shipping</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Admin Actions -->
            @if (User.IsInRole("Admin"))
            {
                <div class="card shadow-sm border-0 mt-4">
                    <div class="card-header bg-white border-0 py-3">
                        <h5 class="mb-0">
                            <i class="fas fa-cog text-primary me-2"></i>Admin Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <form asp-action="UpdateOrderStatus" method="post">
                            <input type="hidden" name="id" value="@Model.Id" />
                            <div class="mb-3">
                                <label for="status" class="form-label">Update Status</label>
                                <select name="status" class="form-select" required>
                                    @foreach (OrderStatus status in Enum.GetValues(typeof(OrderStatus)))
                                    {
                                        <option value="@status" selected="@(status == Model.OrderStatus)">@status</option>
                                    }
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="adminNotes" class="form-label">Admin Notes</label>
                                <textarea name="adminNotes" class="form-control" rows="3" placeholder="Add any internal notes..."></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary w-100 py-2">
                                <i class="fas fa-save me-2"></i>Update Status
                            </button>
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Styles {
    <style>
        .card {
            border-radius: 12px;
            overflow: hidden;
        }

        .card-header {
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .timeline {
            position: relative;
            padding-left: 1.5rem;
        }

        .timeline-item {
            position: relative;
            padding-bottom: 1.5rem;
            border-left: 2px solid #dee2e6;
            padding-left: 1.5rem;
        }

            .timeline-item:last-child {
                padding-bottom: 0;
                border-left: 0;
            }

            .timeline-item::before {
                content: '';
                position: absolute;
                left: -9px;
                top: 0;
                width: 16px;
                height: 16px;
                border-radius: 50%;
                background: #4361ee;
                border: 3px solid white;
                box-shadow: 0 0 0 2px #4361ee;
            }

        .btn-icon {
            width: 40px;
            height: 40px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px !important;
        }

        .table th {
            font-weight: 500;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.5px;
            color: #6c757d;
        }

        .badge {
            border-radius: 10px;
            padding: 0.35em 0.65em;
            font-weight: 500;
        }
    </style>
}

@section Scripts {
    <script>
        // Initialize tooltips
        $(function () {
            $('[data-bs-toggle="tooltip"]').tooltip();
        });
    </script>
}