@model TechXpress.Data.Models.ProductViewModel

<div class="quick-view-container">
    <div class="row">
        <!-- Product Images -->
        <div class="col-md-6">
            <div class="product-gallery">
                <!-- Main Image -->
                <div class="main-image mb-3">
                    <img src="@Model.ImageUrl" class="img-fluid rounded" alt="@Model.Name" id="quickViewMainImage">
                </div>

                <!-- Thumbnails -->
                @* <div class="thumbnail-container d-flex gap-2"> *@
                @*     <div class="thumbnail active" data-image="@Model.ImageUrl"> *@
                @*         <img src="@Model.ImageUrl" class="img-thumbnail" alt="Thumbnail"> *@
                @*     </div> *@
                @* </div> *@
            </div>

            <!-- Product Badges -->
            <div class="product-badges mt-3">
                @if (Model.IsFeatured)
                {
                    <span class="badge bg-primary me-2">Featured</span>
                }
                <span class="badge @(Model.StockQuantity > 0 ? "bg-success" : "bg-danger")">
                    @(Model.StockQuantity > 0 ? "In Stock" : "Out of Stock")
                </span>
            </div>


            <!-- Meta Info -->
            <div class="product-meta small text-muted">
                <div class="mb-1"><strong>SKU:</strong> @Model.SKU</div>
                <div class="mb-1"><strong>Category:</strong> @Model.Category?.Name</div>
                <div>
                    <strong>Availability:</strong>
                    @if (Model.StockQuantity > 0)
                    {
                        <span class="text-success">In Stock</span>
                    }
                    else
                    {
                        <span class="text-danger">Out of Stock</span>
                    }
                </div>
            </div>
        </div>

        <!-- Product Details -->
        <div class="col-md-6">
            <h2 class="product-title mb-2">@Model.Name</h2>
            <!-- Rating -->
            <div class="rating mb-3">
                @{
                    var avgRating = Model.Reviews?.Any() == true ? Model.Reviews.Average(r => r.Rating) : 0;
                    var reviewCount = Model.Reviews?.Count ?? 0;
                }
                @for (int i = 1; i <= 5; i++)
                {
                    if (i <= (int)avgRating)
                    {
                        <i class="fas fa-star text-warning"></i>
                    }
                    else if (i - 0.5 <= avgRating)
                    {
                        <i class="fas fa-star-half-alt text-warning"></i>
                    }
                    else
                    {
                        <i class="far fa-star text-warning"></i>
                    }
                }
                <span class="ms-2 small">(@reviewCount reviews)</span>
            </div>


            <!-- Price -->
            <div class="price-section mb-3">
                <h3 class="text-primary">@Model.Price.ToString("C")</h3>
                @if (Model.StockQuantity <= 5 && Model.StockQuantity > 0)
                {
                    <div class="text-warning small">Only @Model.StockQuantity left in stock!</div>
                }
            </div>

            <!-- Description -->
            <div class="product-description mb-4">
                <p>@Model.Description</p>
            </div>

            <!-- Key Specifications -->
            @if (Model.Specifications != null && Model.Specifications.Any())
            {
                <div class="key-specs mb-4">
                    <h5>Key Features</h5>
                    <ul class="list-unstyled">
                        @foreach (var spec in Model.Specifications.Take(3))
                        {
                            <li><i class="fas fa-check-circle text-success me-2"></i> @spec.Key: @spec.Value</li>
                        }
                    </ul>
                    @if (Model.Specifications.Count > 3)
                    {
                        <a href="#" class="small" data-bs-toggle="collapse" data-bs-target="#moreSpecs">Show more features</a>
                        <div class="collapse" id="moreSpecs">
                            <ul class="list-unstyled">
                                @foreach (var spec in Model.Specifications.Skip(3))
                                {
                                    <li><i class="fas fa-check-circle text-success me-2"></i> @spec.Key: @spec.Value</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            }

            <!-- Add to Cart Form -->
            <!-- Add to Cart Form -->
            <form asp-controller="Cart" asp-action="AddToCart" method="post" class="add-to-cart-form">
                <input type="hidden" name="productId" value="@Model.Id" />

                <div class="row align-items-center mb-4">
                    <div class="col-md-4 mb-2 mb-md-0">
                        <div class="input-group quantity-control">
                            <button type="button" class="btn btn-outline-secondary quantity-minus" @(Model.StockQuantity == 0 ? "disabled" : "")>
                                <i class="fas fa-minus"></i>
                            </button>
                            <input type="number" name="quantity" value="1" min="1" max="@Model.StockQuantity"
                                   class="form-control text-center quantity-input" style="padding:0px;"
                            @(Model.StockQuantity == 0 ? "disabled" : "")>
                            <button type="button" class="btn btn-outline-secondary quantity-plus" @(Model.StockQuantity == 0 ? "disabled" : "")>
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <button type="submit" class="btn btn-primary w-100" @(Model.StockQuantity == 0 ? "disabled" : "")>
                            <i class="fas fa-shopping-cart me-2"></i>
                            @(Model.StockQuantity == 0 ? "Out of Stock" : "Add to Cart")
                        </button>
                    </div>
                </div>
            </form>
            <!-- Quick Actions -->
            <div class="quick-actions d-flex gap-2 mb-4">
                <button class="btn btn-outline-secondary wishlist-btn flex-grow-1">
                    <i class="far fa-heart me-2"></i> Wishlist
                </button>
                <button class="btn btn-outline-secondary compare-btn flex-grow-1">
                    <i class="fas fa-exchange-alt me-2"></i> Compare
                </button>
            </div>

          

            <!-- View Full Details Link -->
            <div class="text-center mt-4">
                <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-link">
                    <i class="fas fa-external-link-alt me-2"></i> View Full Product Details
                </a>
            </div>
        </div>
    </div>
</div>
@section Styles{
<style>
    .quick-view-container {
        padding: 20px;
    }

    .product-gallery {
        position: relative;
    }

    .main-image {
        border: 1px solid #eee;
        padding: 10px;
        text-align: center;
        height: 350px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .main-image img {
            max-height: 100%;
            max-width: 100%;
            object-fit: contain;
        }

    .thumbnail-container {
        overflow-x: auto;
        padding-bottom: 10px;
    }

    .thumbnail {
        width: 80px;
        height: 80px;
        border: 2px solid transparent;
        cursor: pointer;
        flex-shrink: 0;
    }

        .thumbnail.active {
            border-color: #0d6efd;
        }

        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .quantity-control {
        width: 120px;
    }

    .quantity-input {
        text-align: center;
    }
</style>}

    @section Scripts {
	<script>
         document.addEventListener('DOMContentLoaded', function () {
            // Handle quantity controls
            document.querySelectorAll('.quantity-control').forEach(control => {
                const quantityInput = control.querySelector('.quantity-input');
                const plusBtn = control.querySelector('.quantity-plus');
                const minusBtn = control.querySelector('.quantity-minus');
                const maxQuantity = parseInt(quantityInput.max) || 999; // Fallback for when max isn't set

                // Update button states based on current value
                function updateButtonStates() {
                    const currentValue = parseInt(quantityInput.value);
                    minusBtn.disabled = currentValue <= 1;
                    plusBtn.disabled = currentValue >= maxQuantity;
                }

                // Initial button state update
                updateButtonStates();

                // Increase quantity
                plusBtn.addEventListener('click', function () {
                    console.log('Plus button clicked');
                    let value = parseInt(quantityInput.value);
                    if (value < maxQuantity) {
                        quantityInput.value = value + 1;
                        updateButtonStates();
                    }
                });

                // Decrease quantity
                minusBtn.addEventListener('click', function () {
                    console.log('Minus button clicked');
                    let value = parseInt(quantityInput.value);
                    if (value > 1) {
                        quantityInput.value = value - 1;
                        updateButtonStates();
                    }
                });

                // Handle direct input
                quantityInput.addEventListener('change', function () {
                    let value = parseInt(this.value);

                    // Validate input
                    if (isNaN(value)) {
                        this.value = 1;
                    } else if (value < 1) {
                        this.value = 1;
                    } else if (value > maxQuantity) {
                        this.value = maxQuantity;
                    }

                    updateButtonStates();
                });
            });


        // Handle thumbnail click to change main image
        const thumbnails = document.querySelectorAll('.thumbnail');
            thumbnails.forEach(thumb => {
            thumb.addEventListener('click', function () {
                document.querySelectorAll('.thumbnail').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                const newImage = this.getAttribute('data-image');
                document.getElementById('quickViewMainImage').src = newImage;
            });
            });

        // Handle form submission
        const cartForm = document.querySelector('.add-to-cart-form');
        if (cartForm) {
            cartForm.addEventListener('submit', function (e) {
                e.preventDefault();
                const form = this;

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form)
                })
                    .then(response => {
                        if (response.ok) {
                            // Show success message
                            const toast = document.createElement('div');
                            toast.className = 'position-fixed bottom-0 end-0 p-3';
                            toast.innerHTML = `
                                    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                                        <div class="toast-header bg-success text-white">
                                            <strong class="me-auto">Success</strong>
                                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                                        </div>
                                        <div class="toast-body">
                                            Product added to cart successfully!
                                        </div>
                                    </div>
                                `;
                            document.body.appendChild(toast);

                            // Remove toast after 3 seconds
                            setTimeout(() => {
                                toast.remove();
                            }, 3000);
                        } else {
                            alert('Error adding product to cart');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error adding product to cart');
                    });
            });
            }
        });


	</script>
}